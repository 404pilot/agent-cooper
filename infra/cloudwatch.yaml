AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Parameters:
  ProjectName:
    Type: String
  Stage:
    Type: String
  LayerArn:
    Type: String
  SecurityGroupId:
    Type: String
  VpcPrivateSubnetId1:
    Type: String
  VpcPrivateSubnetId2:
    Type: String

Globals:
  Function:
    Runtime: python3.8
    Tracing: Active
    MemorySize: 256
    Timeout: 5
    Layers:
      - !Ref LayerArn
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroupId
      SubnetIds:
        - !Ref VpcPrivateSubnetId1
        - !Ref VpcPrivateSubnetId2
    Environment:
      Variables:
        STAGE: !Ref Stage
        PROJECT_NAME: !Ref ProjectName

Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - !Sub "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: !Sub "/${ProjectName}/${Stage}/"
      Policies:
        - PolicyName: 'system_manager_policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:DescribeParameters"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                  - "ssm:GetParametersByPath"
                Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/${Stage}/*"

  RachioSchedulerLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-Check-Rachio-Next-Schedule"
      RetentionInDays: 30

  CheckRachioNextSchedulePeriodically:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-Check-Rachio-Next-Schedule"
      CodeUri: ./../agent_cooper/rachio/
      Handler: lambda.handler
      Role: !GetAtt LambdaRole.Arn
      Events:
        RachioSchedule:
          Type: Schedule
          Properties:
            Name: !Sub "${ProjectName}-Rachio-Schedule"
            # aws events put-rule --schedule-expression "cron(0/15 * * * ? *)" --name PilotTest
            # 11 AM UTC everyday = 6 AM CST
            Schedule: cron(0 11 * * ? *)
