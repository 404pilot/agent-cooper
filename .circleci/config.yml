version: 2.1

executors:
  python38:
    docker:
      - image: circleci/python:3.8.7

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-sam-serverless: circleci/aws-sam-serverless@3.1.0

project_defaults: &project_defaults
  executor: python38

commands:
  install_depenedencies:
    description: "Set up project"
    steps:
      - run:
          name: "Install dependencies"
          command: poetry install

  list_build_runtime_info:
    steps:
      - run:
          name: "List build runtime info"
          command: |
            echo ""
            echo "python: " && python --version
            echo "pip: " && pip --version
            echo "poetry: " && poetry --version

  environment_variables_setup:
    description: "Set up some necessary environmental variables"
    parameters:
      stage:
        type: string
    steps:
      - run:
          name: "Set up some environmental variables"
          # Note that AWS_PROFILE is reserved by aws cli
          command: |
            DEFAULT_REGION="us-east-1"
            PROJECT_NAME="agent-cooper"

            echo "export STAGE=<< parameters.stage >>" >> ${BASH_ENV}
            echo "export PROJECT_NAME=${PROJECT_NAME}" >> ${BASH_ENV}
            echo "export AWS_PROFILE=<< parameters.stage >>-${PROJECT_NAME}" >> ${BASH_ENV}
            echo "export AWS_DEFAULT_REGION=${DEFAULT_REGION}" >> ${BASH_ENV}
            cat ${BASH_ENV}

  aws_setup:
    description: "Set up AWS cli"
    parameters:
      stage:
        type: string
    steps:
      - aws-sam-serverless/install:
          # Install and configure the AWS CLI and the SAM CLI in one command
          # https://circleci.com/developer/orbs/orb/circleci/aws-sam-serverless
          # create a local aws config and credentials file which are referred by poetry tasks/cli later
          profile-name: << parameters.stage >>-agent-cooper
          aws-access-key-id: AWS_ACCESS_KEY_ID_CIRCLECI # value is set by circleci context
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_CIRCLECI # value is set by circleci context
          configure-default-region: false
      - run:
          name: "List project environmental info"
          command: |
            echo "aws path & version:" && which aws && aws --version
      - run:
          name: "List AWS configuration"
          command: aws configure list-profiles && aws configure list --profile << parameters.stage >>-${PROJECT_NAME}

  sops_setup:
    description: "Install sops"
    steps:
      - run:
          name: "Install SOPS"
          # docker run --rcimg/python:3.8.7 -it /bin/bash
          # docker run --rm -it --entrypoint bash cimg/python:3.8.7
          command: |
            wget -O ~/sops.deb https://github.com/mozilla/sops/releases/download/v3.7.1/sops_3.7.1_amd64.deb
            sudo dpkg -i ~/sops.deb

  list_deploy_runtime_info:
    steps:
      - run:
          name: "List deploy runtime info"
          command: |
            echo ""
            echo "python: " && python --version
            echo "pip: " && pip --version
            echo "poetry: " && poetry --version
            echo "asw-cli: " && aws --version
            echo "sam-cli: " && sam --version
            echo "sops: " && sops --version

  deploy_prep:
    description: "Setup some extra stuff before the deployment"
    steps:
      - run:
          name: "Generate lambda dependencies requirement"
          command: poetry run task generate_lambda_requirement
      - run:
          name: "Generate lambda dependencies"
          command: poetry run task generate_lambda_deps
      - run:
          name: "Create s3 bucket if it is necessary"
          command: poetry run task s3_prep
      - run:
          name: "Sync application properties (secrets)"
          command: poetry run task sync_secrets_properties

  deploy:
    description: "Deploy the app"
    steps:
      - run:
          name: "Clean up sam-build directory"
          command: poetry run task sam_clean
      - run:
          name: "Build the application SAM"
          command: poetry run task sam_build
      - run:
          name: "Deploy the application SAM"
          command: poetry run task sam_deploy
          no_output_timeout: 20m

jobs:
  project_setup:
    <<: *project_defaults
    steps:
      - checkout
      - install_depenedencies
      - list_build_runtime_info
      - persist_to_workspace:
          root: ~/
          paths:
            - project/* # the working director is ~/project by default
            - .cache/pypoetry/virtualenvs/* # newly installed packages and scripts

  project_deploy:
    <<: *project_defaults
    parameters:
      stage:
        type: string
    steps:
      - attach_workspace:
          at: ~/
      - environment_variables_setup:
          stage: << parameters.stage >>
      - aws_setup:
          stage: << parameters.stage >>
      - sops_setup
      - list_deploy_runtime_info
      - deploy_prep
      - deploy

workflows:
  release:
    jobs:
      - project_setup:
          filters:
            branches:
              only:
                - main
      - project_deploy:
          stage: 404pilot
          context: 404pilot-circleci
          requires:
            - project_setup
